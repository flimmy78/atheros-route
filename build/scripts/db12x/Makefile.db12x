
export HAL=$(TOPDIR)/drivers/wlan/hal
export ENETDIR=$(TOPDIR)/linux/drivers/ethernet
export ATH_TOOL_DIR=$(TOPDIR)/drivers/wlan/os/linux/tools/
export ATH_DFS=$(TOPDIR)/drivers/wlan/lmac/dfs
export BOOTLOADERDIR=$(TOPDIR)/boot/u-boot
export ATHEROSPATH=$(TOPDIR)/drivers/wlan
export I2SDIR=$(TOPDIR)/linux/drivers/i2s
export I2SMODPATH=$(INSTALL_ROOT)/lib/modules/$(KERNELVER)/i2s
export SLICDIR=$(TOPDIR)/linux/drivers/slic
export SLICMODPATH=$(INSTALL_ROOT)/lib/modules/$(KERNELVER)/slic
export SI3000DIR=$(TOPDIR)/linux/drivers/si3000
export SI3000MODPATH=$(INSTALL_ROOT)/lib/modules/$(KERNELVER)/si3000
export STM32DIR=$(TOPDIR)/linux/drivers/stm32
export STM32MODPATH=$(INSTALL_ROOT)/lib/modules/$(KERNELVER)/stm32
export USBMODPATH=$(INSTALL_ROOT)/lib/modules/$(KERNELVER)/usb
export USBDIR=${KERNELPATH}/drivers/usb
export PCIDIR=${KERNELPATH}/drivers/pci
export PCITGTMODPATH=$(INSTALL_ROOT)/lib/modules/$(KERNELVER)/athpci
export IPTABLESDIR=$(TOPDIR)/apps/iptables/iptables-1.4.5-qos
export SQUASHFSLZMADIR=$(TOPDIR)/build/squashfs-lzma
export SQUASHFSFILE=$(BOARD_TYPE)$(BUILD_CONFIG)-squashfs
export SSDK_DIR=$(ENETDIR)/s17_ssdk
export NTFS_3G_DIR=$(TOPDIR)/apps/ntfs-3g-2010.10.2
export NTP_ARMDIR=$(TOPDIR)/apps/ntpclient_arm
export SI32178DIR=$(TOPDIR)/linux/drivers/si32178
export SI32178MODPATH=$(INSTALL_ROOT)/lib/modules/$(KERNELVER)/si32178
export SPI32178DIR=$(TOPDIR)/linux/drivers/spi32178
export SPI32178MODPATH=$(INSTALL_ROOT)/lib/modules/$(KERNELVER)/spi32178
export USBPASSAGEDIR=$(TOPDIR)/linux/drivers/passage/usb
export USBPASSAGEMODPATH=$(INSTALL_ROOT)/lib/modules/$(KERNELVER)/passage/usb
export UARTPASSAGEDIR=$(TOPDIR)/linux/drivers/passage/uart
export UARTPASSAGEMODPATH=$(INSTALL_ROOT)/lib/modules/$(KERNELVER)/passage/uart
export SPIPASSAGEDIR=$(TOPDIR)/linux/drivers/passage/spi
export SPIPASSAGEMODPATH=$(INSTALL_ROOT)/lib/modules/$(KERNELVER)/passage/spi
export PHONEPASSAGEDIR=$(TOPDIR)/linux/drivers/passage/phone
export PHONEPASSAGEMODPATH=$(INSTALL_ROOT)/lib/modules/$(KERNELVER)/passage/phone
export AS532HDIR=$(TOPDIR)/linux/drivers/as532h
export AS532HMODPATH=$(INSTALL_ROOT)/lib/modules/$(KERNELVER)/as532h
export AS532HDEFIMAGEPATH=$(INSTALL_ROOT)/var/default_image/as532h
export STM32DEFIMAGEPATH=$(INSTALL_ROOT)/var/default_image/stm32
export AS532HDEFIMAGE=$(TOPDIR)/apps/modules_server/default_image/as532h/as532h_default_image
export STM32DEFIMAGE=$(TOPDIR)/apps/modules_server/default_image/stm32/stm32_default_image
#
# Makefile for WASP Fusion build.  It has dependancies for both
# the "common" build and the "jffs2" build.  This is unique for
# each board type, and must be configured for each board.
#

# To enable library optimization (removing unused object code from
# shared libraries) set BUILD_LIBRARYOPT to 'y' else 'n'
BUILD_LIBRARYOPT := n

ifeq ($(GWLANG),)
export GWLANG=mlang_en
endif

export fs_build=$(BUILD_TYPE)_build
export stage2_build=

ifdef ATH_DUAL_FLASH
ifeq ($(BUILD_TYPE), jffs2)
export fs_build=nandjffs2_build
endif
endif

ifdef BOOT_FROM_NAND
ifeq ($(BUILD_TYPE), jffs2)
export fs_build=nandjffs2_build
endif
export stage2_build=stage2
endif

ifdef CONFIG_I2S
export i2s_mod=i2s_build athplay_tools_fus
else
export i2s_mod=
endif

ifeq ($(BUILD_CONFIG), _powercloud)
export fs_build=$(BUILD_TYPE)_powercloud_build
endif

ifeq ($(strip $(BUILD_CONFIG)),_mi124)
export JFFS2FILE=mi124$(ETH_CONFIG)-jffs2
export IMAGEPATH=$(TOPDIR)/images/mi124
else
ifeq ($(strip $(BUILD_CONFIG)),_mi124_offload)
export JFFS2FILE=mi124_offload-jffs2
export IMAGEPATH=$(TOPDIR)/images/mi124_offload
else
ifeq ($(strip $(BUILD_CONFIG)),_ap123)
export JFFS2FILE=ap123-jffs2
export IMAGEPATH=$(TOPDIR)/images/ap123
endif
endif
endif

ifneq ($(findstring _routing,$(BUILD_CONFIG)),)
db12x_build: common_mainline iptables_build driver_build $(fs_build) art_mod
else
ifeq ($(BUILD_CONFIG),_hwaccel)
db12x_build: common_mainline iptables_build driver_build $(fs_build) art_mod
else
ifeq ($(BUILD_CONFIG), _i2ssmb)
db12x_build: common_mainline usb_build i2s_build athplay_tools_fus samba_build driver_build $(fs_build) art_mod
else
ifeq ($(BUILD_CONFIG), _mi124_offload)
db12x_build: common_mainline driver_build vmlrd stage1
else
ifeq ($(BUILD_CONFIG), _mi124)
db12x_build: common_mainline driver_build art_mod
else
ifeq ($(BUILD_CONFIG), _ap123)
db12x_build: common_mainline usb_build driver_build art_mod
else
ifeq ($(BUILD_CONFIG), _powercloud)
db12x_build: common_mainline iptables_build ebtables_build powercloud_build driver_build usb_build pci_build i2s_build athplay_tools_fus $(fs_build)
else
ifeq ($(strip ${ATH_SUPPORT_SPECTRAL}),1)
db12x_build: common_mainline driver_build usb_build pci_build spectral_app_build $(BUILD_TYPE)_build art_mod
else
ifeq ($(BUILD_FOR_32178), yes)
db12x_build: common_mainline kernel_modules iptables_build driver_build usb_build pci_build art_mod $(i2s_mod) si32178_build spi32178_build phone_9344_32178 check_phone_status modules_server OTA_Base env  usbpassage_build uartpassage_build spipassage_build phonepassage_build as532h_build ntpclient_arm  ppy pppoe_build channel webui terminal_dev_register cacm tester $(fs_build) makeotaimage makeoneimage 
else
db12x_build: common_mainline kernel_modules iptables_build driver_build usb_build pci_build art_mod $(i2s_mod) si3000_build si3000_app stm32_build stm32_app phone_9344  ntpclient_arm  ppy pppoe_build channel webui terminal_dev_register cacm tester $(fs_build) makeotaimage makeoneimage 
endif
#db12x_build: common_mainline i2s_build athplay_tools_fus usb_build $(fs_build)
#db12x_build: common_mainline slic_build slic_app i2s_build athplay_tools_fus $(fs_build)
#db12x_build: common_mainline gateway_build slic_build slic_app $(fs_build)
endif
endif
endif
endif
endif
endif
endif
endif

#	lzma_uimage kernel_info enet_build usb_build busybox_build wpa2 \

ifeq ($(BUILD_ATHR_HOSTAP),1)
common_mainline: check_tftp rootfs_prep toolchain_build \
	kernel_build kernel_info enet_build busybox_build athr-hostapd athr-wpa_supplicant \
	sar cgi lzma_uimage uboot_mainline samba_build \
	ntfs3g_build $(stage2_build)
else
common_mainline: check_tftp rootfs_prep toolchain_build \
	kernel_build kernel_info enet_build busybox_build wpa2 \
	sar cgi lzma_uimage uboot_mainline samba_build \
	ntfs3g_build $(stage2_build)
endif
#	lzma_uimage kernel_info enet_build busybox_build wpa2 \
#	uboot_mainline sar cgi

#
#pppoe_build added by yhl 2013.10.29
#
pppoe_build:
#	export INSTALL_ROOT=$(TOPDIR)/rootfs-$(BOARD_TYPE)$(BUILD_CONFIG)$(BUILD_EXT)$(NAND).build \
	echo "*************yhl**************"
	cd $(TOPDIR)/apps/pppoe && make clean && make
	cp $(TOPDIR)/apps/pppoe/ppp-2.4.5/pppd/pppd $(INSTALL_ROOT)/usr/sbin
	cp $(TOPDIR)/apps/pppoe/rp-pppoe-3.8/src/pppoe $(INSTALL_ROOT)/usr/sbin
	cp $(TOPDIR)/apps/pppoe/rp-pppoe-3.8/src/pppoe-server $(INSTALL_ROOT)/usr/sbin
	cp $(TOPDIR)/apps/pppoe/rp-pppoe-3.8/src/pppoe_start $(INSTALL_ROOT)/usr/sbin
	cp $(TOPDIR)/apps/pppoe/rp-pppoe-3.8/src/pap-secrets $(INSTALL_ROOT)/usr/sbin
	cp $(TOPDIR)/apps/pppoe/rp-pppoe-3.8/src/options $(INSTALL_ROOT)/usr/sbin
	cp $(TOPDIR)/apps/pppoe/rp-pppoe-3.8/src/rp-pppoe.so $(INSTALL_ROOT)/usr/sbin
	cp $(TOPDIR)/apps/pppoe/rp-pppoe-3.8/src/pppoe-sniff $(INSTALL_ROOT)/usr/sbin
	cp $(TOPDIR)/apps/pppoe/rp-pppoe-3.8/src/pppoe-relay $(INSTALL_ROOT)/usr/sbin
	mkdir $(INSTALL_ROOT)/etc/ppp
	cp -ra $(TOPDIR)/apps/pppoe/rp-pppoe-3.8/configs/* $(INSTALL_ROOT)/etc/ppp
	cp -ra $(TOPDIR)/apps/pppoe/rp-pppoe-3.8/scripts/* $(INSTALL_ROOT)/usr/sbin
	
#
#ntp_build add by wangyu
#
ntpclient_arm:
	@echo "staring compile ntpclient. "
	cd  ${NTP_ARMDIR} && make
	chmod 744 ${NTP_ARMDIR}/ntpclient
	chmod 744 ${NTP_ARMDIR}/adjtimex
	cp ${NTP_ARMDIR}/ntpclient $(INSTALL_ROOT)/usr/sbin
	cp ${NTP_ARMDIR}/adjtimex $(INSTALL_ROOT)/usr/sbin

#
#threethread added by yhl 2013.10.29
#
threethread:
	cd $(TOPDIR)/apps/threethread && make
	cp $(TOPDIR)/apps/threethread/threethread $(INSTALL_ROOT)/usr/sbin
	
#
#ppy added by yhl 2013.10.29
#
ppy:
	cd $(TOPDIR)/apps/ppy && make
	cp $(TOPDIR)/apps/ppy/ppy $(INSTALL_ROOT)/usr/sbin

iptables_build:
	@echo making iptables
	cd $(IPTABLESDIR) && \
	$(MAKE) clean && \
	$(MAKE) NO_SHARED_LIBS=1 && \
	cp iptables $(INSTALL_ROOT)/sbin/iptables
#	cp .libs/iptables-multi $(INSTALL_ROOT)/sbin/iptables && \
#	cp -P .libs/libxtables*.so* $(INSTALL_ROOT)/lib && \
#	cp -P libiptc/.libs/libip4tc*.so* $(INSTALL_ROOT)/lib && \
#	cd extensions && \
#	cp libipt_DNAT.so libipt_MASQUERADE.so libipt_SNAT.so libxt_conntrack.so libxt_standard.so libxt_state.so libxt_tcp.so libxt_udp.so libipt_icmp.so libxt_helper.so $(INSTALL_ROOT)/lib

#	$(MAKE) KERNEL_DIR=$(KERNELPATH) NO_SHARED_LIBS=1 && \
#	$(TOOLPREFIX)strip -s iptables && \
#	cp iptables-multi $(INSTALL_ROOT)/sbin/iptables

ifeq ($(BUILD_CONFIG), _powercloud)

ifeq ($(BUILD_TYPE), jffs2)
jffs2_powercloud_build: image_root
	@echo Making jffs2_powercloud at `date`
	cd $(IMAGEPATH) && \
	$(TOPDIR)/build/util/mkfs.jffs2 --root=$(IMAGE_ROOT) --eraseblock=$(ERASEBLOCKSIZE) -b -D $(TOPDIR)/build/scripts/$(BOARD_TYPE)/dev_powercloud.txt --squash -o $(JFFS2FILE) --pad=$(TARGETFSSIZE)
	cp $(IMAGEPATH)/$(JFFS2FILE) $(TFTPPATH)
	@echo Done Making jffs2_powercloud at `date`
endif

ebtables_build:
	@echo making ebtables
	cd $(TOPDIR)/apps/ebtables/ebtables-v2.0.9-2 && \
	$(MAKE) clean KERNEL_DIR=$(KERNELPATH) && \
	$(MAKE) KERNEL_DIR=$(KERNELPATH) && \
	cp -f ebtables $(INSTALL_ROOT)/sbin/ebtables && \
	cp -f libebtc.so $(INSTALL_ROOT)/lib && \
	cp -f ethertypes $(INSTALL_ROOT)/etc && \
	cp extensions/*.so $(INSTALL_ROOT)/lib

powercloud_clean:
	cd $(TOPDIR)/apps/powercloud-client && \
	make veryclean

powercloud_build:
	@echo building PowerCloud software
	cd $(TOPDIR)/apps/powercloud-client && \
	make && \
	cp -rf $(TOPDIR)/apps/powercloud-client/output/* $(INSTALL_ROOT)/
endif

ukey_build:
	@echo building ukey software
	cd $(TOPDIR)/apps/ukey_syno && \
	make && \
	cp -f $(TOPDIR)/apps/ukey_syno/ukey_test $(INSTALL_ROOT)/
samba_build:
ifeq ($(BUILD_SAMBA),y)
	@echo Building samba ver 3.0.24.....
	cd ../apps/samba-3.0.24/source; \
        make CC=$(TOOLPREFIX)gcc AR=$(TOOLPREFIX)ar LD=$(TOOLPREFIX)ld ; \
        mkdir $(INSTALL_ROOT)/usr/local; \
        make CC=$(TOOLPREFIX)gcc AR=$(TOOLPREFIX)ar LD=$(TOOLPREFIX)ld STRIP=$(TOOLPREFIX)strip install prefix=$(INSTALL_ROOT)/usr/local;
endif

ntfs3g_build:
ifeq ($(BUILD_NTFS3G),y)
	@echo Building NTFS-3g......
	@echo BEGIN make ntfs-3g at `date`
	cd $(NTFS_3G_DIR) && \
	$(MAKE) clean && \
	$(MAKE) prefix=$(INSTALL_ROOT) all install && \
	touch $(INSTALL_ROOT)/etc/mtab;
	@echo END make ntfs-3g at `date`
endif

#
# Unique rules for the ag7240 PHY with the wasp   board
#

ifeq ($(strip $(ETH_CONFIG)), _s17_hwaccel)
enet_build: ssdk_build
else
enet_build:
endif
	cd $(ENETDIR) && rm -f *.o *.ko *.mod.* && make -f Makefile.inc enet_config.h 
	cd $(ENETDIR) && rm -f *.o *.ko *.mod.*
	$(MAKEARCH) -C $(KERNELPATH) SUBDIRS=$(ENETDIR) modules
	test -d $(MODULEPATH) || mkdir -p $(MODULEPATH)
	cp $(ENETDIR)/athrs_gmac.ko $(MODULEPATH)

i2s_build: kernel_build
	cd $(I2SDIR) && rm -f *.o *.ko *.mod.*
	$(MAKEARCH) -C $(KERNELPATH) SUBDIRS=$(I2SDIR) modules
	test -d $(I2SMODPATH) || mkdir -p $(I2SMODPATH)
	cp $(I2SDIR)/ath_i2s.ko $(I2SMODPATH)

pci_build: kernel_build
	test -d $(PCITGTMODPATH) || mkdir -p $(PCITGTMODPATH)
	cp $(PCIDIR)/ath_pci_tgt.ko $(PCITGTMODPATH)

slic_build: kernel_build
	cd $(SLICDIR) && rm -f *.o *.ko *.mod.*
	$(MAKEARCH) -C $(KERNELPATH) SUBDIRS=$(SLICDIR) modules
	test -d $(SLICMODPATH) || mkdir -p $(SLICMODPATH)
	cp $(SLICDIR)/ath_slic.ko $(SLICMODPATH)

stm32_build: kernel_build
	cd $(STM32DIR) && rm -f *.o *.ko *.mod.*
	$(MAKEARCH) -C $(KERNELPATH) SUBDIRS=$(STM32DIR) modules
	test -d $(STM32MODPATH) || mkdir -p $(STM32MODPATH)
	cp $(STM32DIR)/ath_spi_stm32.ko $(STM32MODPATH)	

si3000_build: kernel_build
	cd $(SI3000DIR) && rm -f *.o *.ko *.mod.*
	$(MAKEARCH) -C $(KERNELPATH) SUBDIRS=$(SI3000DIR) modules
	test -d $(STM32MODPATH) || mkdir -p $(SI3000MODPATH)
	cp $(SI3000DIR)/ath_si3000.ko $(SI3000MODPATH)	
	
webui: 
	cd ../apps/webui; \
	cp -f net/net_check $(INSTALL_ROOT)/bin; \
	cp -f net/wan_check $(INSTALL_ROOT)/bin; \
	cp -f net/net_test $(INSTALL_ROOT)/bin;	\
	cp -f upgrade/sysupgrade $(INSTALL_ROOT)/usr/sbin; \
	cp -f upgrade/__sysupgrade $(INSTALL_ROOT)/usr/sbin; \
	cp -f upgrade/upgrade_stage2 $(INSTALL_ROOT)/usr/bin; \
	cp -f cal_check $(INSTALL_ROOT)/usr/bin;		\
	cp -f version_check $(INSTALL_ROOT)/usr/bin;  \
	cp -f repeatVAP $(INSTALL_ROOT)/usr/bin;  \
	cp -f dhcp/set_addr $(INSTALL_ROOT)/usr/sbin;  \
	cp -f dhcp/del_addr $(INSTALL_ROOT)/usr/sbin;  \
	cp -f dhcp/modify_addr $(INSTALL_ROOT)/usr/sbin;  \
	cp -f route/set_route $(INSTALL_ROOT)/usr/sbin;  \
	cp -f route/del_route $(INSTALL_ROOT)/usr/sbin;  \
	cp -f route/modify_route $(INSTALL_ROOT)/usr/sbin;  \
	cp -f arp/set_arp $(INSTALL_ROOT)/usr/sbin;  \
	cp -f arp/del_arp $(INSTALL_ROOT)/usr/sbin;  \
	cp -f arp/modify_arp $(INSTALL_ROOT)/usr/sbin;  \
	cp -f backup/set_backup $(INSTALL_ROOT)/usr/sbin;  \
	cp -f backup/del_backup $(INSTALL_ROOT)/usr/sbin;  \
	cp -f backup/var_backup $(INSTALL_ROOT)/usr/sbin;  \
	cp -f ntp/set_pctime $(INSTALL_ROOT)/usr/sbin;  \
	cp -f ntp/set_ntpserver $(INSTALL_ROOT)/usr/sbin;  \
	cp -f net/network_diagnostics $(INSTALL_ROOT)/usr/sbin;  \
	cp -f net/web_control $(INSTALL_ROOT)/usr/sbin;  \
	cd mac_addr/; \
	make; \
	cp -f get_mac $(INSTALL_ROOT)/usr/sbin; \
	cp -f set_mac $(INSTALL_ROOT)/usr/sbin; \
	cp -f set_macaddr $(INSTALL_ROOT)/usr/sbin; \
	cd ..; \
	cd firmware/; \
	make; \
	cp -f firmware_check $(INSTALL_ROOT)/usr/sbin; \
	cp -f firmware_check2 $(INSTALL_ROOT)/usr/sbin; \
	cd ./../arp; \
	make; \
	cp -f arp $(INSTALL_ROOT)/usr/sbin;
	
tester: 
	cd ../apps/tester; \
	cp -f memtester $(INSTALL_ROOT)/bin; \
	cp -f stabel_test.sh $(INSTALL_ROOT)/bin;	
	
channel:
	@echo making channel app	
	cd ../apps/channel; make clean; make; \
	$(STRIP) server; \
	cp -f server $(INSTALL_ROOT)/bin;
	
athplay_tools_fus:
	@echo making athplay_tools
	cd ../apps/athplay; make clean; make; \
	$(STRIP) athplay; \
	cp -f athplay $(INSTALL_ROOT)/bin;

slic_app:
	@echo making slic application
	cd ../apps/slicapp; make clean; make; \
	$(STRIP) slicapp; \
	cp -f slicapp $(INSTALL_ROOT)/bin;
	
stm32_app:
	@echo making stm32 application
	cd ../apps/stm32app; make clean; make; \
	$(STRIP) stm32app; \
	cp -f stm32app $(INSTALL_ROOT)/bin;
	
si3000_app:
	@echo making si3000 application
	cd ../apps/si3000app; make clean; make; \
	$(STRIP) pcmtest_send; \
	$(STRIP) pcmtest_rece; \
	$(STRIP) pcmtest_ioctl; \
	cp -f pcmtest_send $(INSTALL_ROOT)/bin; \
	cp -f pcmtest_rece $(INSTALL_ROOT)/bin;  \
	cp -f pcmtest_ioctl $(INSTALL_ROOT)/bin;


phone_9344: 
	@echo making phone_9344 application
	cd ../apps/pstn_test; make clean; make; \
	echo before strip; \
	$(STRIP) phone/lib/libmediastreamer.so.1.0.0; \
	$(STRIP) phone/lib/libogg.so.0.8.0; \
	$(STRIP) phone/lib/libortp.so.8.0.0; \
	$(STRIP) phone/lib/libspeexdsp.so.1.5.0; \
	$(STRIP) phone/lib/libspeex.so.1.5.0; \
	$(STRIP) pstn_serv_handaer/phone_serv_19200; \
	$(STRIP) reset_mips; \
	cp -af phone/lib/libmediastreamer.so.1.0.0 $(INSTALL_ROOT)/lib; \
	cp -af phone/lib/libmediastreamer.so.1 $(INSTALL_ROOT)/lib; \
	cp -af phone/lib/libmediastreamer.so $(INSTALL_ROOT)/lib; \
	cp -af phone/lib/libogg.so.0.8.0 $(INSTALL_ROOT)/lib; \
	cp -af phone/lib/libogg.so.0 $(INSTALL_ROOT)/lib; \
	cp -af phone/lib/libogg.so $(INSTALL_ROOT)/lib; \
	cp -af phone/lib/libortp.so.8.0.0 $(INSTALL_ROOT)/lib; \
	cp -af phone/lib/libortp.so.8 $(INSTALL_ROOT)/lib; \
	cp -af phone/lib/libortp.so $(INSTALL_ROOT)/lib; \
	cp -af phone/lib/libspeexdsp.so.1.5.0 $(INSTALL_ROOT)/lib; \
	cp -af phone/lib/libspeexdsp.so.1 $(INSTALL_ROOT)/lib; \
	cp -af phone/lib/libspeexdsp.so $(INSTALL_ROOT)/lib; \
	cp -af phone/lib/libspeex.so.1.5.0 $(INSTALL_ROOT)/lib; \
	cp -af phone/lib/libspeex.so.1 $(INSTALL_ROOT)/lib; \
	cp -af phone/lib/libspeex.so $(INSTALL_ROOT)/lib; \
	cp -af pstn_serv_handaer/phone_serv_19200 $(INSTALL_ROOT)/bin; \
	cp -af reset_mips  $(INSTALL_ROOT)/bin; \
	echo finished making pstn_9344;

	
terminal_dev_register:
	@echo making terminal_dev_register app
	cd ../apps/terminal_dev_register; make clean; make; \
	$(STRIP) sqlite-mips-linux/lib/libsqlite3.so.0.8.6; \
	$(STRIP) libdata_storager.so; \
	$(STRIP) libspi_rt.so; \
	$(STRIP) libterminal_authentication.so; \
	$(STRIP) libterminal_register.so; \
	$(STRIP) libcommunication.so; \
	$(STRIP) libcommon_tools.so; \
	$(STRIP) spi_rt_main; \
        $(STRIP) spi_rt_uart1; \
        $(STRIP) usb_stub; \
	$(STRIP) terminal_dev_register; \
	$(STRIP) terminal_init_test; \
	$(STRIP) interface_test; \
	$(STRIP) swipe_card; \
	$(STRIP) monitor_application; \
	cp -af sqlite-mips-linux/lib/libsqlite3.so.0.8.6 $(INSTALL_ROOT)/lib; \
	cp -af sqlite-mips-linux/bin/sqlite3 $(INSTALL_ROOT)/bin; \
	cp -af libdata_storager.so $(INSTALL_ROOT)/lib; \
	cp -af libspi_rt.so $(INSTALL_ROOT)/lib; \
	cp -af libterminal_authentication.so $(INSTALL_ROOT)/lib; \
	cp -af libterminal_register.so $(INSTALL_ROOT)/lib; \
	cp -af libcommunication.so $(INSTALL_ROOT)/lib; \
	cp -af libcommon_tools.so $(INSTALL_ROOT)/lib; \
	cp -af spi_rt_main $(INSTALL_ROOT)/bin; \
	cp -af spi_rt_uart1 $(INSTALL_ROOT)/bin; \
	cp -af usb_stub $(INSTALL_ROOT)/bin; \
	cp -af terminal_dev_register $(INSTALL_ROOT)/bin; \
	cp -af terminal_init_test $(INSTALL_ROOT)/bin; \
	cp -af interface_test $(INSTALL_ROOT)/bin; \
	cp -af swipe_card $(INSTALL_ROOT)/bin; \
	cp -af monitor_application $(INSTALL_ROOT)/bin; \
        mkdir -p $(INSTALL_ROOT)/var/terminal_dev_register/db/; \
        mkdir -p $(INSTALL_ROOT)/var/terminal_dev_register/log/; \
        mkdir -p $(INSTALL_ROOT)/var/terminal_dev_register/fs/; \
	cp -af config $(INSTALL_ROOT)/var/terminal_dev_register/; \
	cp -af terminal_base_db $(INSTALL_ROOT)/var/terminal_dev_register/db/; \
	cp -af fat_fs $(INSTALL_ROOT)/var/terminal_dev_register/fs/; \
	echo finished making terminal_dev_register;	

cacm:
	@echo making cacm app
	cd ../apps/cacm; make clean; make; \
	$(STRIP) target/lib/libeXosip2.so.4.2.0; \
	$(STRIP) target/lib/libosip2.so.4.2.0; \
	$(STRIP) target/lib/libosipparser2.so.4.2.0; \
	$(STRIP) target/bin/cacm; \
	cp -af target/lib/libeXosip2.so.4.2.0 $(INSTALL_ROOT)/lib; \
	cp -af target/lib/libeXosip2.la $(INSTALL_ROOT)/lib; \
	cp -af target/lib/libosip2.so.4.2.0 $(INSTALL_ROOT)/lib; \
	cp -af target/lib/libosip2.la $(INSTALL_ROOT)/lib; \
	cp -af target/lib/libosipparser2.so.4.2.0 $(INSTALL_ROOT)/lib; \
	cp -af target/lib/libosipparser2.la $(INSTALL_ROOT)/lib; \
	cp -af target/bin/cacm $(INSTALL_ROOT)/bin; \
        mkdir -p $(INSTALL_ROOT)/var/cacm/log/; \
	echo finished making cacm;	

WIRELESSTOOLNAMES := athstats athstatsclear 80211stats athkey athchans athctrl\
	athdebug 80211debug wlanconfig athcwm athampdutrc atrc \
	pktlogconf pktlogdump radartool cgiMain
wireless_tools_main:
	@echo making wireless_tools 
	if test -n "$(WIRELESSTOOLS)"; then \
	cd ../apps/$(WIRELESSTOOLS); make clean; make; \
	cp -f $(WIRELESSTOOLSLIB) $(INSTALL_ROOT)/lib; \
	cp -f iwpriv $(INSTALL_ROOT)/sbin; \
	cp -f iwconfig $(INSTALL_ROOT)/sbin; \
	cp -f iwlist $(INSTALL_ROOT)/sbin; \
	cd $(TOPDIR)/drivers/wlan/os/linux/tools && make clean; \
	make wlanconfig BUILD_STATIC=$(BUILD_STATIC); \
	cp -f wlanconfig $(INSTALL_ROOT)/sbin; \
	fi

ath_tools: ath_tools_clean
	@echo makeing ath tools;\
	cd ../drivers/wlan/os/linux/tools;\
	make ath_tools;

ath_tools_clean:
	@echo cleaning ath tools;\
	cd ../drivers/wlan/os/linux/tools;\
	make ath_tools_clean;

cgi: ath_tools_clean
	@echo makeing cgi;\
	cd ../drivers/wlan/os/linux/tools;\
	rm -rf cgiMain;\
	rm -rf upload.cgi;\
	make cgiMain; \
	make upload.cgi; 

art_mod:
	@echo Making ART Module
	cd ../apps/art && make -f makefile.soc.linux.mips clean && \
	make -f makefile.soc.linux.mips wasp_osprey
	cp ../apps/art/modules/art.ko $(MODULEPATH)/art-wasp-osprey.ko
	cd ../apps/art && make -f makefile.soc.linux.mips clean && \
	make -f makefile.soc.linux.mips wasp
	cp ../apps/art/modules/art.ko $(MODULEPATH)/art-wasp.ko
	cp ../apps/art/modules/nart.out $(INSTALL_ROOT)/bin/nart.out
	cp ../apps/art/modules/start-art.sh $(INSTALL_ROOT)/bin/start-art.sh

main_hal_build:
	@echo making hal
	if test -n "$(TARGETARCH)"; then \
	cd $(HAL)/linux && make TARGET=$(TARGETARCH) clean &&  \
	make TARGET=$(TARGETARCH) && make TARGET=$(TARGETARCH) release; \
	fi

driver_build: main_hal_build wireless_tools_main ath_tools
	@echo making umac
	cd $(TOPDIR)/drivers/wlan/os/linux && \
	$(MAKEARCH) TARGET=$(TARGETARCH) clean \
	&& $(MAKEARCH) TARGET=$(TARGETARCH) && \
	$(MAKEARCH) DESTDIR=$(INSTALLROOT) TARGET=$(TARGETARCH) install
	$(MAKE) $(fs_build)

usb_build: kernel_build
	test -d $(USBMODPATH) || mkdir -p $(USBMODPATH)
	cp -f $(USBDIR)/core/usbcore.ko ${USBMODPATH}
	cp -f ${USBDIR}/host/ehci-hcd.ko ${USBMODPATH}
	cp -f ${USBDIR}/storage/usb-storage.ko ${USBMODPATH}
ifneq ($(BUILD_CONFIG), _ap123)
	cp -f ${USBDIR}/gadget/g_ether.ko ${USBMODPATH}
	cp -f ${USBDIR}/gadget/ath_udc.ko ${USBMODPATH}
	cp -f ${USBDIR}/gadget/g_file_storage.ko ${USBMODPATH}
	cp -f ${KERNELPATH}/drivers/net/usb/usbnet.ko ${USBMODPATH}
	cp -f ${KERNELPATH}/drivers/net/usb/cdc_ether.ko ${USBMODPATH}
endif

si32178_build: kernel_build
	cd $(SI32178DIR) && rm -f *.o *.ko *.mod.*
	$(MAKEARCH) -C $(KERNELPATH) SUBDIRS=$(SI32178DIR) modules
	test -d $(SI32178MODPATH) || mkdir -p $(SI32178MODPATH)
	cp $(SI32178DIR)/ath_si32178.ko $(SI32178MODPATH)

spi32178_build: kernel_build
	cd $(SPI32178DIR) && rm -f *.o *.ko *.mod.*
	$(MAKEARCH) -C $(KERNELPATH) SUBDIRS=$(SPI32178DIR) modules
	test -d $(SPI32178MODPATH) || mkdir -p $(SPI32178MODPATH)
	cp $(SPI32178DIR)/ath_spi_si32178.ko $(SPI32178MODPATH)

usbpassage_build: kernel_build
	cd $(USBPASSAGEDIR) && rm -f *.o *.ko *.mod.*
	$(MAKEARCH) -C $(KERNELPATH) SUBDIRS=$(USBPASSAGEDIR) modules
	test -d $(USBPASSAGEMODPATH) || mkdir -p $(USBPASSAGEMODPATH)
	cp $(USBPASSAGEDIR)/usb_passage.ko $(USBPASSAGEMODPATH)

uartpassage_build: kernel_build
	cd $(UARTPASSAGEDIR) && rm -f *.o *.ko *.mod.*
	$(MAKEARCH) -C $(KERNELPATH) SUBDIRS=$(UARTPASSAGEDIR) modules
	test -d $(UARTPASSAGEMODPATH) || mkdir -p $(UARTPASSAGEMODPATH)
	cp $(UARTPASSAGEDIR)/uart_passage.ko $(UARTPASSAGEMODPATH)
	
spipassage_build: kernel_build
	cd $(SPIPASSAGEDIR) && rm -f *.o *.ko *.mod.*
	$(MAKEARCH) -C $(KERNELPATH) SUBDIRS=$(SPIPASSAGEDIR) modules
	test -d $(SPIPASSAGEMODPATH) || mkdir -p $(SPIPASSAGEMODPATH)
	cp $(SPIPASSAGEDIR)/spi_passage.ko $(SPIPASSAGEMODPATH)
	
phonepassage_build: kernel_build
	cd $(PHONEPASSAGEDIR) && rm -f *.o *.ko *.mod.*
	$(MAKEARCH) -C $(KERNELPATH) SUBDIRS=$(PHONEPASSAGEDIR) modules
	test -d $(PHONEPASSAGEMODPATH) || mkdir -p $(PHONEPASSAGEMODPATH)
	cp $(PHONEPASSAGEDIR)/phone_passage.ko $(PHONEPASSAGEMODPATH)

as532h_build: kernel_build
	cd $(AS532HDIR) && rm -f *.o *.ko *.mod.*
	$(MAKEARCH) -C $(KERNELPATH) SUBDIRS=$(AS532HDIR) modules
	test -d $(AS532HMODPATH) || mkdir -p $(AS532HMODPATH)
	cp $(AS532HDIR)/as532h.ko $(AS532HMODPATH)

phone_9344_32178:
	@echo making phone_9344_32178 application
	cd ../apps/phone_9344_32178; make clean; make; \
	$(STRIP) phone_control; \
	cp -f phone_control $(INSTALL_ROOT)/bin;


OTA_Base:
	@echo making OTA_Base application
	cd ../apps/OTA_Base; make clean; make; \
	$(STRIP) OTA_Base; \
	cp -f OTA_Base $(INSTALL_ROOT)/bin;

env:
	@echo making env application
	cd ../apps/env; cp -f fw_env.config $(INSTALL_ROOT)/etc; \
	cd ../apps/env; make clean; make; \
	$(STRIP) fw_printenv; \
	cp fw_printenv fw_setenv; \
	cp -f fw_printenv $(INSTALL_ROOT)/bin; \
	cp -f fw_setenv $(INSTALL_ROOT)/bin;

modules_server:
	@echo making modules_server application
	cd ../apps/modules_server; make clean; make; \
	$(STRIP) modules_server; \
	cp -f modules_server $(INSTALL_ROOT)/bin;
	mkdir -p $(AS532HDEFIMAGEPATH)
	mkdir -p $(STM32DEFIMAGEPATH)
	cp -r $(AS532HDEFIMAGE) $(AS532HDEFIMAGEPATH)
	cp -r $(STM32DEFIMAGE) $(STM32DEFIMAGEPATH)
	
check_phone_status:
	@echo making check_phone_status application
	cd ../apps/check_phone_status; make clean; make; \
	$(STRIP) check_phone_status; \
	cp -f check_phone_status $(INSTALL_ROOT)/bin;
	
uboot_mainline:
	@echo making uboot...
	cd $(BOOTLOADERDIR) && make db12x_config
	cd $(BOOTLOADERDIR) && make clean && make BUILD_DIR=$(TOPDIR)/build
ifeq ($(strip ${COMPRESSED_UBOOT}),1)
	cp $(BOOTLOADERDIR)/tuboot.bin $(IMAGEPATH)
else
	cp $(BOOTLOADERDIR)/u-boot.bin $(IMAGEPATH)
endif

stage1:
	@echo making 1st stage f/w ...
	@cd $(TOPDIR)/boot/rom-boot-drv && make clean all
	cp $(TOPDIR)/boot/rom-boot-drv/fwu_rombootdrv.c $(IMAGEPATH)

$(TOPDIR)/boot/utility/bin/checksum:
	@echo $@
	@cd $(TOPDIR)/boot/utility/checksum; make

$(TOPDIR)/boot/utility/bin/bin2hex:
	@echo $@
	@cd $(TOPDIR)/boot/utility/bin2hex; make

stage2: $(TOPDIR)/boot/utility/bin/checksum $(TOPDIR)/boot/utility/bin/bin2hex stage1
	@echo Combining 1st and 2nd stage f/w ...
	@cd $(TOPDIR)/boot/rom-boot-drv && ./mk2stage -2 $(IMAGEPATH)/u-boot.bin && cp 2fw.bin $(IMAGEPATH) && cp 2fw.bin $(TFTPPATH)

uboot_tools:
	@echo Making uboot tools...
	cd $(BOOTLOADERDIR) && $(MAKEARCH) mrproper
	cd $(BOOTLOADERDIR) && make db12x_config
	cd $(BOOTLOADERDIR) && make tools

lzma_build:
	@echo making lzma.....
	cd $(TOPDIR)/apps/lzma457/CPP/7zip/Compress/LZMA_Alone && \
	make -f makefile.gcc clean && \
	make -f makefile.gcc  && \
	echo copying lzma... && \
	cp -f lzma	$(TOPDIR)/build/util

lzma_uimage: kernel_build lzma_build uboot_tools
	@echo "Generating LZMA'ed kernel....."
	cd $(KERNELPATH)/arch/$(KERNELARCH)/boot && \
	$(TOPDIR)/build/util/lzma e $(KERNELTARGET) $(KERNELTARGET).lzma && \
	cp $(KERNELTARGET).lzma $(TFTPPATH)/$(KTFILE).lzma && \
	cp $(KERNELTARGET).lzma $(IMAGEPATH)/$(KTFILE).lzma;
	echo Making uImage...
	cd util && mkuImage.sh $(UBOOTDIR)/tools $(KERNELPATH) $(BUILD_CONFIG)$(BUILD_EXT) lzma

# Note: doing a make (make all) in gateway automatically does an install
gateway_build:
	@echo BEGIN make gateway_build at `date`
	cd ../apps/gateway && $(MAKE) GATEWAY_MAKE_CLEAN=y clean && \
	$(MAKE) GATEWAY_MAKE_CLEAN=y CC=$(TOOLPREFIX)gcc AR=$(TOOLPREFIX)ar LD=$(TOOLPREFIX)ld all
	@echo END make gateway_build at `date`

vmlrd: kernel_build kernel_info ram_build
ifdef BUILD_CONFIG
	cd $(IMAGEPATH) && $(TOPDIR)/build/util/mksingle -b ${BUILD_CONFIG}
else
ifdef ETH_CONFIG
	cd $(IMAGEPATH) && $(TOPDIR)/build/util/mksingle -b ${ETH_CONFIG}
else
	cd $(IMAGEPATH) && $(TOPDIR)/build/util/mksingle
endif
endif

sqlzma_build:
	cd $(SQUASHFSLZMADIR) && \
	$(MAKE)

sqlzma_clean:
	cd $(SQUASHFSLZMADIR) && \
	$(MAKE) clean

$(TOPDIR)/build/util/mksquashfs4.0:
	@echo ======= Compiling $@ ========
	@cd $(TOPDIR)/build/squashfs-lzma/squashfs4.0/squashfs-tools/; make
	@echo ======= Copying $@ ========
	@cp squashfs-lzma/squashfs4.0/squashfs-tools/mksquashfs util/mksquashfs4.0

squashfs_build: sqlzma_build image_root $(TOPDIR)/build/util/mksquashfs4.0
	@echo BEGIN make squashfs at `date`
	cd $(IMAGE_ROOT) && mkdir -p ./dev -m 715
	cd $(IMAGE_ROOT) && mkdir -p ./sys -m 715
	cd $(IMAGE_ROOT) && ln -s /tmp/mnt ./mnt
	@echo Not creating hacked device files,
	@echo mksquashfs 4.0 supports dev.txt
	echo $(BOARD_TYPE)/`date +%F-%H:%M` >$(IMAGE_ROOT)/version
	$(TOPDIR)/build/util/mksquashfs4.0 $(IMAGE_ROOT) \
		$(IMAGEPATH)/$(SQUASHFSFILE) -noappend -b 65536 -all-root \
		-pf $(TOPDIR)/build/scripts/$(BOARD_TYPE)/dev.txt
###	sudo $(TOPDIR)/build/scripts/$(BOARD_TYPE)/makedev.sh
###	$(TOPDIR)/build/util/mksquashfs $(IMAGE_ROOT) $(IMAGEPATH)/$(SQUASHFSFILE) -noappend -be -all-root
###	sudo chmod 777 $(IMAGEPATH)/$(SQUASHFSFILE)
	chmod 644 $(IMAGEPATH)/$(SQUASHFSFILE)
	cp $(IMAGEPATH)/$(SQUASHFSFILE) $(TFTPPATH)
	@echo END make squashfs at `date`

# Atheros S17 SSDK for hwnat, hwacl
ssdk_build:
	@echo making SSDK....
	cd $(SSDK_DIR) && \
	$(MAKE) clean; $(MAKE) && \
	cp build/bin/ssdk_ks_km.a $(ENETDIR)/phys/ && \
	cp build/bin/ssdk_sh $(INSTALL_ROOT)/sbin/ssdk_sh
	@echo end of making SSDK


