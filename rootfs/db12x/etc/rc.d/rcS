#!/bin/sh

# This script runs when init it run during the boot process.
# Mounts everything in the fstab

mount -a
mount -o remount +w /

#added by yhl 2013.11.13
mknod /dev/ppp c 108 0
mkdir -p /var/local/tmp/ppp/status

#
# Mount the RAM filesystem to /tmp
#

mount -t ramfs -n none /tmp

export PATH=$PATH:/etc/ath



# for profile-based-optimization
grep -iq "debugfs" /proc/filesystems
if [ $? -eq 0 ]
then
	grep -iq "sysfs" /proc/filesystems
	if [ $? -eq 0 ]
	then
		if [ ! -d /sys ]
		then
			mkdir /sys >/dev/null 2>&1
		fi

		mount -t sysfs none /sys >/dev/null 2>&1
		if [ $? -eq 0 ]
		then
			mount -t debugfs none /sys/kernel/debug >/dev/null 2>&1
			if [ $? -eq 0 ]
			then
				echo "** sysfs & debugfs mounted successfully **"
			else
				echo "****** debugfs mount failure ******"
			fi
					
		else
			echo "****** sysfs mount failure ******"
		fi
	fi
fi

insmod /lib/modules/2.6.31/net/athrs_gmac.ko

##
## Put the names of the interfaces in the environmental variables
## (They can be board unique)
##

export WAN_IF=eth0
export LAN_IF=eth1


#yuhaolei for mac default display
ETH0_MAC_2=`cfg -e | grep "ETH0_MAC" | awk -F "\"" '{print $2}'`
if [ "${ETH0_MAC_2}" != "" ]; then
	ifconfig eth0 hw ether $ETH0_MAC_2
fi
#yuhaolei

#rm the old sta list by zzw
rm /etc/.OldStaList

/usr/bin/cal_check 
ifconfig $WAN_IF up
ifconfig $LAN_IF up
/etc/rc.d/rc.network
/etc/rc.d/rc.bridge
. /etc/ath/apcfg


#
# Enable I2S
#
#insmod /lib/modules/2.6.31/i2s/ath_i2s.ko

#
# Untar the debug tools into /tmp/tools
#

mkdir /tmp/tools
cd /tmp/tools
tar -xzvf /sbin/debug.tgz

/usr/sbin/telnetd
/usr/sbin/httpd -h /usr/www/ -c /etc/httpd.conf
/bin/factoryreset /dev/freset

# start the page cache/kmem cache cleanup timer in the kernel
echo 1 > /proc/sys/vm/drop_caches

# when processes uses page-cache more than 30% of system memory,
# lets force them to write
echo 20 > /proc/sys/vm/dirty_ratio

# when the dirty pages cross more than 5% of sys memory,
# kick in the pdflush
echo 5 > /proc/sys/vm/dirty_background_ratio

##
## Check for Auto AP Start
##

if [ "${WLAN_ON_BOOT}" = "y" -a "${WIFION_OFF}" = "on" ]; then
    /etc/ath/apup
fi

##
## nat settings 
##
/etc/rc.d/rc.modules
/etc/nat_vlan.sh
if [ "${PRIDNS}" != "" ]
then
	echo "nameserver ${PRIDNS}" > /etc/resolv.conf
else
	echo "nameserver 8.8.8.8" > /etc/resolv.conf
fi
if [ "${SECDNS}" != "" ]
then
	echo "nameserver ${SECDNS}" >> /etc/resolv.conf
fi
##
## dhcp
##
/etc/rc.d/rc.udhcpd
if [ -f /etc/ip_mac.conf ]; then
	cat /etc/ip_mac.conf | grep "enable" | awk 'BEGIN{OFS=FS=" "}{print $1,$2,$3}' >> /etc/udhcpd.conf
fi
if [ "${WDSON_OFF}" != "on" -a "${DHCPON_OFF}" != "off" ]; then
	/usr/sbin/udhcpd /etc/udhcpd.conf
fi
if [ -f /etc/arp_ip_mac_on.conf ]; then
	/usr/sbin/arp -f /etc/arp_ip_mac_on.conf
fi

/usr/bin/version_check &

/bin/server &
/usr/bin/cal_check &
/usr/sbin/threethread &
/usr/sbin/set_ntpserver &

